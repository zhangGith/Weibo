//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `Discover`.
    static let discover = _R.storyboard.discover()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Message`.
    static let message = _R.storyboard.message()
    /// Storyboard `Newfeature`.
    static let newfeature = _R.storyboard.newfeature()
    /// Storyboard `Null`.
    static let null = _R.storyboard.null()
    /// Storyboard `Popver`.
    static let popver = _R.storyboard.popver()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Welcome`.
    static let welcome = _R.storyboard.welcome()
    /// Storyboard `ZCQRCode`.
    static let zcqrCode = _R.storyboard.zcqrCode()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Discover", bundle: ...)`
    static func discover(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.discover)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Message", bundle: ...)`
    static func message(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.message)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Newfeature", bundle: ...)`
    static func newfeature(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newfeature)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Null", bundle: ...)`
    static func null(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.null)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Popver", bundle: ...)`
    static func popver(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popver)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Welcome", bundle: ...)`
    static func welcome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcome)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ZCQRCode", bundle: ...)`
    static func zcqrCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.zcqrCode)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MainVCSettings.json`.
    static let mainVCSettingsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "MainVCSettings", pathExtension: "json")

    /// `bundle.url(forResource: "MainVCSettings", withExtension: "json")`
    static func mainVCSettingsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mainVCSettingsJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 54 images.
  struct image {
    /// Image `Brand Assets`.
    static let brandAssets = Rswift.ImageResource(bundle: R.hostingBundle, name: "Brand Assets")
    /// Image `ad_background`.
    static let ad_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ad_background")
    /// Image `avatar_default_big`.
    static let avatar_default_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_default_big")
    /// Image `common_button_white_disable`.
    static let common_button_white_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_button_white_disable")
    /// Image `navigationbar_arrow_down`.
    static let navigationbar_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_arrow_down")
    /// Image `navigationbar_arrow_up`.
    static let navigationbar_arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_arrow_up")
    /// Image `navigationbar_friendattention_highlighted`.
    static let navigationbar_friendattention_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_friendattention_highlighted")
    /// Image `navigationbar_friendattention`.
    static let navigationbar_friendattention = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_friendattention")
    /// Image `navigationbar_pop_highlighted`.
    static let navigationbar_pop_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_pop_highlighted")
    /// Image `navigationbar_pop`.
    static let navigationbar_pop = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_pop")
    /// Image `new_feature_1`.
    static let new_feature_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_1")
    /// Image `new_feature_2`.
    static let new_feature_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_2")
    /// Image `new_feature_3`.
    static let new_feature_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_3")
    /// Image `new_feature_4`.
    static let new_feature_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_4")
    /// Image `new_feature_button_highlighted`.
    static let new_feature_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_button_highlighted")
    /// Image `new_feature_button`.
    static let new_feature_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_button")
    /// Image `new_feature_finish_button_highlighted`.
    static let new_feature_finish_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_finish_button_highlighted")
    /// Image `new_feature_finish_button`.
    static let new_feature_finish_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_finish_button")
    /// Image `new_feature_share_false`.
    static let new_feature_share_false = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_share_false")
    /// Image `new_feature_share_true`.
    static let new_feature_share_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_share_true")
    /// Image `popover_background_left`.
    static let popover_background_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "popover_background_left")
    /// Image `popover_background_right`.
    static let popover_background_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "popover_background_right")
    /// Image `popover_background`.
    static let popover_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "popover_background")
    /// Image `qrcode_border`.
    static let qrcode_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_border")
    /// Image `qrcode_button_background`.
    static let qrcode_button_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_button_background")
    /// Image `qrcode_embeddedimage_shadow`.
    static let qrcode_embeddedimage_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_embeddedimage_shadow")
    /// Image `qrcode_navigationbar_background`.
    static let qrcode_navigationbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_navigationbar_background")
    /// Image `qrcode_scanline_barcode`.
    static let qrcode_scanline_barcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_scanline_barcode")
    /// Image `qrcode_scanline_qrcode`.
    static let qrcode_scanline_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_scanline_qrcode")
    /// Image `qrcode_tabbar_background`.
    static let qrcode_tabbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_background")
    /// Image `qrcode_tabbar_icon_barcode_highlighted`.
    static let qrcode_tabbar_icon_barcode_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_barcode_highlighted")
    /// Image `qrcode_tabbar_icon_barcode`.
    static let qrcode_tabbar_icon_barcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_barcode")
    /// Image `qrcode_tabbar_icon_qrcode_highlighted`.
    static let qrcode_tabbar_icon_qrcode_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_qrcode_highlighted")
    /// Image `qrcode_tabbar_icon_qrcode`.
    static let qrcode_tabbar_icon_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_qrcode")
    /// Image `qrcode_tip_background`.
    static let qrcode_tip_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tip_background")
    /// Image `tabbar_background`.
    static let tabbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_background")
    /// Image `tabbar_compose_button_highlighted`.
    static let tabbar_compose_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_button_highlighted")
    /// Image `tabbar_compose_button`.
    static let tabbar_compose_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_button")
    /// Image `tabbar_compose_icon_add_highlighted`.
    static let tabbar_compose_icon_add_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_icon_add_highlighted")
    /// Image `tabbar_compose_icon_add`.
    static let tabbar_compose_icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_icon_add")
    /// Image `tabbar_discover_highlighted`.
    static let tabbar_discover_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_discover_highlighted")
    /// Image `tabbar_discover`.
    static let tabbar_discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_discover")
    /// Image `tabbar_home_highlighted`.
    static let tabbar_home_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_highlighted")
    /// Image `tabbar_home`.
    static let tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home")
    /// Image `tabbar_message_center_highlighted`.
    static let tabbar_message_center_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_message_center_highlighted")
    /// Image `tabbar_message_center`.
    static let tabbar_message_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_message_center")
    /// Image `tabbar_profile_highlighted`.
    static let tabbar_profile_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile_highlighted")
    /// Image `tabbar_profile`.
    static let tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile")
    /// Image `visitordiscover_feed_image_house`.
    static let visitordiscover_feed_image_house = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_feed_image_house")
    /// Image `visitordiscover_feed_image_smallicon`.
    static let visitordiscover_feed_image_smallicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_feed_image_smallicon")
    /// Image `visitordiscover_feed_mask_smallicon`.
    static let visitordiscover_feed_mask_smallicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_feed_mask_smallicon")
    /// Image `visitordiscover_image_message`.
    static let visitordiscover_image_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_image_message")
    /// Image `visitordiscover_image_profile`.
    static let visitordiscover_image_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_image_profile")
    /// Image `visitordiscover_signup_logo`.
    static let visitordiscover_signup_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_signup_logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Brand Assets", bundle: ..., traitCollection: ...)`
    static func brandAssets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brandAssets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_background", bundle: ..., traitCollection: ...)`
    static func ad_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_default_big", bundle: ..., traitCollection: ...)`
    static func avatar_default_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_default_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common_button_white_disable", bundle: ..., traitCollection: ...)`
    static func common_button_white_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_button_white_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationbar_arrow_down", bundle: ..., traitCollection: ...)`
    static func navigationbar_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationbar_arrow_up", bundle: ..., traitCollection: ...)`
    static func navigationbar_arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_arrow_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationbar_friendattention", bundle: ..., traitCollection: ...)`
    static func navigationbar_friendattention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_friendattention, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationbar_friendattention_highlighted", bundle: ..., traitCollection: ...)`
    static func navigationbar_friendattention_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_friendattention_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationbar_pop", bundle: ..., traitCollection: ...)`
    static func navigationbar_pop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_pop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationbar_pop_highlighted", bundle: ..., traitCollection: ...)`
    static func navigationbar_pop_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_pop_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_1", bundle: ..., traitCollection: ...)`
    static func new_feature_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_2", bundle: ..., traitCollection: ...)`
    static func new_feature_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_3", bundle: ..., traitCollection: ...)`
    static func new_feature_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_4", bundle: ..., traitCollection: ...)`
    static func new_feature_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_button", bundle: ..., traitCollection: ...)`
    static func new_feature_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_button_highlighted", bundle: ..., traitCollection: ...)`
    static func new_feature_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_button_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_finish_button", bundle: ..., traitCollection: ...)`
    static func new_feature_finish_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_finish_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_finish_button_highlighted", bundle: ..., traitCollection: ...)`
    static func new_feature_finish_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_finish_button_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_share_false", bundle: ..., traitCollection: ...)`
    static func new_feature_share_false(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_share_false, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_feature_share_true", bundle: ..., traitCollection: ...)`
    static func new_feature_share_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_share_true, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popover_background", bundle: ..., traitCollection: ...)`
    static func popover_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popover_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popover_background_left", bundle: ..., traitCollection: ...)`
    static func popover_background_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popover_background_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popover_background_right", bundle: ..., traitCollection: ...)`
    static func popover_background_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popover_background_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_border", bundle: ..., traitCollection: ...)`
    static func qrcode_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_border, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_button_background", bundle: ..., traitCollection: ...)`
    static func qrcode_button_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_button_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_embeddedimage_shadow", bundle: ..., traitCollection: ...)`
    static func qrcode_embeddedimage_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_embeddedimage_shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_navigationbar_background", bundle: ..., traitCollection: ...)`
    static func qrcode_navigationbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_navigationbar_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_scanline_barcode", bundle: ..., traitCollection: ...)`
    static func qrcode_scanline_barcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_scanline_barcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_scanline_qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode_scanline_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_scanline_qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_tabbar_background", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_tabbar_icon_barcode", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_barcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_barcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_tabbar_icon_barcode_highlighted", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_barcode_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_barcode_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_tabbar_icon_qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_tabbar_icon_qrcode_highlighted", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_qrcode_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_qrcode_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_tip_background", bundle: ..., traitCollection: ...)`
    static func qrcode_tip_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tip_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_background", bundle: ..., traitCollection: ...)`
    static func tabbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_compose_button", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_compose_button_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_button_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_compose_icon_add", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_icon_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_compose_icon_add_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_icon_add_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_icon_add_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_discover", bundle: ..., traitCollection: ...)`
    static func tabbar_discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_discover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_discover_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_discover_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_discover_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home", bundle: ..., traitCollection: ...)`
    static func tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_home_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_message_center", bundle: ..., traitCollection: ...)`
    static func tabbar_message_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_message_center, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_message_center_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_message_center_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_message_center_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_profile", bundle: ..., traitCollection: ...)`
    static func tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_profile_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_profile_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visitordiscover_feed_image_house", bundle: ..., traitCollection: ...)`
    static func visitordiscover_feed_image_house(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_feed_image_house, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visitordiscover_feed_image_smallicon", bundle: ..., traitCollection: ...)`
    static func visitordiscover_feed_image_smallicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_feed_image_smallicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visitordiscover_feed_mask_smallicon", bundle: ..., traitCollection: ...)`
    static func visitordiscover_feed_mask_smallicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_feed_mask_smallicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visitordiscover_image_message", bundle: ..., traitCollection: ...)`
    static func visitordiscover_image_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_image_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visitordiscover_image_profile", bundle: ..., traitCollection: ...)`
    static func visitordiscover_image_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_image_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visitordiscover_signup_logo", bundle: ..., traitCollection: ...)`
    static func visitordiscover_signup_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_signup_logo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `VisitorView`.
    static let visitorView = _R.nib._VisitorView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VisitorView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.visitorView) instead")
    static func visitorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.visitorView)
    }
    #endif

    static func visitorView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VisitorView? {
      return R.nib.visitorView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VisitorView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `newfeaCell`.
    static let newfeaCell: Rswift.ReuseIdentifier<ZCNewfeatureCell> = Rswift.ReuseIdentifier(identifier: "newfeaCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _VisitorView.validate()
    }

    struct _VisitorView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VisitorView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VisitorView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VisitorView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "common_button_white_disable", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_button_white_disable' is used in nib 'VisitorView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visitordiscover_feed_image_house", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visitordiscover_feed_image_house' is used in nib 'VisitorView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visitordiscover_feed_image_smallicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visitordiscover_feed_image_smallicon' is used in nib 'VisitorView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visitordiscover_feed_mask_smallicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visitordiscover_feed_mask_smallicon' is used in nib 'VisitorView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try discover.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try message.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try newfeature.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try null.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try popver.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try welcome.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try zcqrCode.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct discover: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Discover"

      static func validate() throws {
        if UIKit.UIImage(named: "tabbar_discover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_discover' is used in storyboard 'Discover', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Home"

      static func validate() throws {
        if UIKit.UIImage(named: "tabbar_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_home' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct message: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Message"

      static func validate() throws {
        if UIKit.UIImage(named: "tabbar_message_center", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_message_center' is used in storyboard 'Message', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct newfeature: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewfeatureViewController

      let bundle = R.hostingBundle
      let name = "Newfeature"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct null: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NullViewController

      let bundle = R.hostingBundle
      let name = "Null"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct popver: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PopveriewController

      let bundle = R.hostingBundle
      let name = "Popver"

      static func validate() throws {
        if UIKit.UIImage(named: "popover_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popover_background' is used in storyboard 'Popver', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Profile"

      static func validate() throws {
        if UIKit.UIImage(named: "tabbar_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_profile' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct welcome: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WelcomeViewController

      let bundle = R.hostingBundle
      let name = "Welcome"

      static func validate() throws {
        if UIKit.UIImage(named: "ad_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ad_background' is used in storyboard 'Welcome', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct zcqrCode: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "ZCQRCode"

      static func validate() throws {
        if UIKit.UIImage(named: "qrcode_border", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_border' is used in storyboard 'ZCQRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode_scanline_qrcode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_scanline_qrcode' is used in storyboard 'ZCQRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode_tabbar_icon_barcode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_tabbar_icon_barcode' is used in storyboard 'ZCQRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode_tabbar_icon_qrcode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_tabbar_icon_qrcode' is used in storyboard 'ZCQRCode', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
